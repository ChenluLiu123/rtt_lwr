
require("print")
require("os")
import("rtt_rospack")
import("rtt_roscomm")
import("lwr_utils")

this.loadService("this","ros_helper")

global string getRobotName()
{
    return this.ros_helper.getRobotName();
}

global string getRobotNs()
{
    return this.ros_helper.getRobotNs();
}

global string getTfPrefix()
{
    return this.ros_helper.getTfPrefix();
}

global bool isSim()
{
    return this.ros_helper.isSim();
}

global bool importRequiredPackages()
{
    # This is gonna load all the <export><plugin_depends> tags
    print.ln("Loading all recommended RTT packages")
    require("scripting")
    import("rtt_ros")
    scripting.eval("ros.import(\"lwr_utils\")")
    print.ln("Done loading recommended RTT packages")
    return true;
}


global bool setRobotInitialJointConfiguration(double q0,double q1,double q2,double q3,double q4,double q5,double q6)
{
    # Example : setRobotInitialJointConfiguration(1.0,0.,0.0,-1.57,0.0,1.57,0.)
    this.ros_helper.rosServiceCall("/gazebo/set_model_configuration '{ model_name: "+getRobotName()+",joint_names: [ joint_0, joint_1, joint_2,joint_3, joint_4, joint_5, joint_6 ],joint_positions: ["+q0+", "+q1+", "+q2+", "+q3+", "+q4+", "+q5+", "+q6+"]}' --wait -v");
    return true;
}

global bool loadKRLTool(bool start_component)
{
  var string robot_name = getRobotName()
  var string component_name = robot_name+"_krl_tool"
  print.ln("\033[34;1m[Info] Loading KRL Tool for robot ["+robot_name+"]\033[0m\n")
  import("rtt_lwr_krl_tool")
  loadComponent(component_name,"lwr::KRLTool")
  setActivity(component_name,0.01,10,ORO_SCHED_OTHER)


  connectPeers(component_name,robot_name)
  connect(component_name+".toKRL"  ,robot_name+".toKRL"    ,ConnPolicy())
  connect(component_name+".fromKRL",robot_name+".fromKRL"  ,ConnPolicy())
  connect(component_name+".JointImpedanceCommand",robot_name+".JointImpedanceCommand",ConnPolicy())
  configureComponent(component_name)
  if(start_component) then
      startComponent(component_name)
  return true
}

global void setJointTorqueControlMode()
{
    scripting.eval("krl_tool.setJointTorqueControlMode()")
}

global void setCartesianImpedanceControlMode()
{
    scripting.eval("krl_tool.setCartesianImpedanceControlMode()")
}

global void setJointImpedanceControlMode()
{
    scripting.eval("krl_tool.setJointImpedanceControlMode()")
}
void loadGazeboComponent(string comp_name)
{
    import("rtt_std_srvs")
    import("rtt_roscomm")
    import("rtt_gazebo_embedded")

    loadComponent(comp_name,"RTTGazeboEmbedded")
    setActivity(comp_name,0.1,10,ORO_SCHED_OTHER)
    scripting.eval(comp_name+".argv = strings(\"--verbose\")")

    scripting.eval(comp_name+".add_plugin(\"libgazebo_ros_paths_plugin.so\")")
    scripting.eval(comp_name+".add_plugin(\"libgazebo_ros_api_plugin.so\")")

    scripting.eval(comp_name+".world_path = ros.find(\"lwr_utils\")+\"/launch/lwr.world\"")

    configureComponent(comp_name)

    startComponent(comp_name)
}

var bool gz_loaded = false;
if(!gz_loaded && isSim()) then
{
    loadGazeboComponent("gazebo")
    gz_loaded = true;
    importRequiredPackages()
}

var bool required_packages_loaded = false;
if(!isSim()) then
    importRequiredPackages()

global string loadRobot(string robot_name,bool is_sim,bool start_component)
{
    #importRequiredPackages()
    #var bool is_sim = isSim();
    #var string robot_name = getRobotName()

    if(is_sim) then
    {
        import("rtt_lwr_sim")
        loadComponent(robot_name,"lwr::LWRSim")
        connectPeers("gazebo",robot_name)
        scripting.eval(robot_name+".getModel(\"gazebo\",\""+robot_name+"\",30.0)")
        configureComponent(robot_name)

        print.ln("\033[34;1m[Info]["+robot_name+"] RUNNING ON SIMULATION \033[0m\n")
    }
    else
    {

        var string robot_hw_script_path = ros.find("lwr_fri")+"/lwr_fri_loader.ops"

        print.ln("Loading robot config from : "+robot_hw_script_path)

        runScript(robot_hw_script_path)

        print.ln("\033[34;1m[Info]["+robot_name+"] RUNNING ON HARDWARE \033[0m\n")
    }

    if(start_component) then
        startComponent(robot_name)

    loadKRLTool(start_component)

    return robot_name;
}

var strings ports_names = strings("JointPosition","JointVelocity","JointTorque","JointPositionCommand","JointTorqueCommand","fromKRL","toKRL","RobotState","FRIState");

global bool connectAllPorts(string controller_name,string robot_name, ConnPolicy cp)
{
    print.ln("Connecting all ports from "+controller_name+" to robot "+robot_name);
    connectPeers(controller_name,robot_name);
    var bool connected = false;
    for(var int i = 0 ; i < ports_names.size ; i = i + 1)
    {
        connected = connect(robot_name+"."+ports_names[i],controller_name+"."+ports_names[i],cp);
        print.ln("- "+robot_name+"."+ports_names[i]+" => "+controller_name+"."+ports_names[i]+" : "+connected);
    }
    return true
}

global bool loadStatePublisher(bool start_component)
{
    var string robot_name = getRobotName()

    #var string state_pub_path = ros.find("rtt_state_publisher")+"/scripts/loader.ops"
    #print.ln("Loading state publisher at "+state_pub_path)
    #runScript(state_pub_path)
    import("rtt_state_publisher")
    import("rtt_sensor_msgs")

    loadComponent("state_pub","RTTStatePublisher")

    setActivity("state_pub",0.01,LowestPriority,ORO_SCHED_OTHER)
    #setActivity("state_pub",0,LowestPriority,ORO_SCHED_OTHER)
    #loadService("state_pub","sim_clock_activity")
    #ros.clock.useROSClockTopic()
    #ros.clock.enableSimClock()
    if(!configureComponent("state_pub")) then
        return false

    print.ln("\033[34;1m[Info] Loading state publisher \033[0m\n")

    connectPeers("state_pub",robot_name)
    connect("state_pub.JointPosition",robot_name+".JointPosition",ConnPolicy())
    connect("state_pub.JointVelocity",robot_name+".JointVelocity",ConnPolicy())
    connect("state_pub.JointTorque",robot_name+".JointTorque",ConnPolicy())

    stream("state_pub.JointStates",ros.comm.topic("joint_states"))

    if(start_component) then
        startComponent("state_pub")
    return true
}

global bool loadConman()
{
    print.ln("\033[34;1m[Info]Loading ConMan \033[0m\n")
    var string robot_name = getRobotName()

    scripting.eval("ros.import(\"conman\")")
    scripting.eval("ros.import(\"conman_ros\")")
    loadComponent("scheme","conman::Scheme")
    setActivity("scheme",0.001,10,ORO_SCHED_RT)
    scripting.eval("scheme.loadService(\"conman_ros\")")
    scripting.eval("scheme.addGroup(\"robots\")")
    scripting.eval("scheme.addGroup(\"state_estimation\")")
    scripting.eval("scheme.addGroup(\"controllers\")")

    scripting.eval("connectPeers(\"scheme\",\""+robot_name+"\")")
    scripting.eval("connectPeers(\"scheme\",\"state_pub\")")
    stopComponent("state_pub")
    stopComponent(robot_name)
    scripting.eval("scheme.addToGroup(\""+robot_name+"\",\"robots\")")
    scripting.eval("scheme.addToGroup(\"state_pub\",\"state_estimation\")")

    return true
}

global bool addControllerToConman(string component_name)
{
    stopComponent(component_name);
    connectPeers("scheme",component_name);
    scripting.eval("scheme.addToGroup(\""+component_name+"\",\"controllers\")");
    return scripting.eval("scheme.latchConnections(\"robots\",\"controllers\",true)");
}

global bool loadFBSched()
{
    import("fbsched");
    var bool res = loadComponent("fbs","FBSched");
    setActivity("fbs",0.001,10,ORO_SCHED_RT);
    return res;
}
global bool addControllerToFBSched(string component_name)
{
    stopComponent(component_name);
    scripting.eval(component_name+".setPeriod(0)");
    startComponent(component_name);
    connectPeers("fbs",component_name);
    setMasterSlaveActivity("fbs",component_name)
    return true;
}

global void generateGraph()
{
    import("rtt_dot_service")
    loadService("this","dot")
    print.ln("You can now run \n\n\t xdot ~/.ros/orograph.dot")
}


global bool loadJointTrajectoryGeneratorKDL(bool start_component)
{
  var string robot_name = getRobotName()
  import("rtt_ros")
  scripting.eval("ros.import(\"rtt_joint_traj_generator_kdl\")")
  loadComponent("traj_kdl","JointTrajGeneratorKDL")
  setActivity("traj_kdl",0.001,10,ORO_SCHED_RT);

  connect("traj_kdl.joint_position_in",robot_name+".JointPosition",ConnPolicy())
  connect("traj_kdl.joint_velocity_in",robot_name+".JointVelocity",ConnPolicy())
  connect("traj_kdl.joint_position_out",robot_name+".JointPositionCommand",ConnPolicy())

  configureComponent("traj_kdl")

  if(start_component) then
      startComponent("traj_kdl")
  return true;
}
