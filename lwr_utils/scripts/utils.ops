
require("print")
require("os")
import("rtt_ros")
import("rtt_rospack")
import("rtt_roscomm")
import("lwr_utils")

# "this" argument hasn't reach debians yet
this.loadService("Deployer","ros_helper")

global string getRobotName()
{
    return this.ros_helper.getRobotName();
}

global string getRobotNs()
{
    return this.ros_helper.getRobotNs();
}

global string getTfPrefix()
{
    return this.ros_helper.getTfPrefix();
}

global bool isSim()
{
    return this.ros_helper.isSim();
}

global bool importRequiredPackages()
{
    # This is gonna load all the <export><plugin_depends> tags
    print.ln("[Info] Loading all recommended RTT packages")
    require("scripting")
    import("rtt_ros")
    ros.import("lwr_utils")
    print.ln("[Info] Done loading recommended RTT packages")
    return true;
}


global bool setRobotInitialJointConfiguration(double q0,double q1,double q2,double q3,double q4,double q5,double q6)
{
    # Example : setRobotInitialJointConfiguration(1.0,0.,0.0,-1.57,0.0,1.57,0.)
    this.ros_helper.rosServiceCall("/gazebo/set_model_configuration '{ model_name: "+getRobotName()+",joint_names: [ joint_0, joint_1, joint_2,joint_3, joint_4, joint_5, joint_6 ],joint_positions: ["+q0+", "+q1+", "+q2+", "+q3+", "+q4+", "+q5+", "+q6+"]}' --wait -v");
    return true;
}

global bool loadKRLTool(bool start_component)
{
  var string robot_name = getRobotName()
  var string component_name = robot_name+"_krl_tool"
  print.ln("\033[34;1m[Info] Loading KRL Tool for "+robot_name+"\033[0m\n")
  import("rtt_lwr_krl_tool")
  loadComponent(component_name,"lwr::KRLTool")
  setActivity(component_name,0.01,10,ORO_SCHED_OTHER)


  connectPeers(component_name,robot_name)
  connect(component_name+".toKRL"  ,robot_name+".toKRL"    ,ConnPolicy())
  connect(component_name+".fromKRL",robot_name+".fromKRL"  ,ConnPolicy())
  connect(component_name+".JointImpedanceCommand",robot_name+".JointImpedanceCommand",ConnPolicy())
  configureComponent(component_name)
  if(start_component) then
      startComponent(component_name)
  return true
}

global void setJointTorqueControlMode()
{
    scripting.eval(getRobotName()+"_krl_tool.setJointTorqueControlMode()")
}

global void setCartesianImpedanceControlMode()
{
    scripting.eval(getRobotName()+"_krl_tool.setCartesianImpedanceControlMode()")
}

global void setJointImpedanceControlMode()
{
    scripting.eval(getRobotName()+"_krl_tool.setJointImpedanceControlMode()")
}
void loadGazeboComponent(string comp_name)
{
    import("rtt_std_srvs")
    import("rtt_roscomm")
    import("rtt_gazebo_embedded")
    # import("rtt_rosclock")

    loadComponent(comp_name,"RTTGazeboEmbedded")
    setActivity(comp_name,0.1,10,ORO_SCHED_OTHER)
    scripting.eval(comp_name+".argv = strings(\"--verbose\")")

    scripting.eval(comp_name+".add_plugin(\"libgazebo_ros_paths_plugin.so\")")
    scripting.eval(comp_name+".add_plugin(\"libgazebo_ros_api_plugin.so\")")

    scripting.eval(comp_name+".world_path = ros.find(\"lwr_utils\")+\"/launch/lwr.world\"")

    configureComponent(comp_name)

    # gazebo.loadService("rosclock")

    startComponent(comp_name)
}

var bool gz_loaded = false;
if(!gz_loaded && isSim()) then
{
    loadGazeboComponent("gazebo")
    gz_loaded = true;
    importRequiredPackages()
}

var bool required_packages_loaded = false;
if(!isSim()) then
    importRequiredPackages()

var strings std_ports_names = strings("JointPosition","JointVelocity","JointTorque","JointPositionCommand","JointTorqueCommand");
var strings lwr_ports_names = strings("fromKRL","toKRL","RobotState","FRIState");

global bool connectPortsFromList(string controller_name,string robot_name,strings ports_list ,ConnPolicy cp)
{
    connectPeers(controller_name,robot_name);
    var bool connected = true;
    for(var int i = 0 ; i < ports_list.size ; i = i + 1)
    {
        connected = connect(robot_name+"."+ports_list[i],controller_name+"."+ports_list[i],cp);
        print.ln("- "+robot_name+"."+ports_list[i]+" => "+controller_name+"."+ports_list[i]+" : "+connected);
    }
    return true;
}
global bool connectStandardPorts(string controller_name,string robot_name, ConnPolicy cp)
{
    print.ln("Connecting Standard ports from "+controller_name+" to robot "+robot_name);
    connectPortsFromList(controller_name,robot_name,std_ports_names,cp);
    return true
}

global bool connectLWRPorts(string controller_name,string robot_name, ConnPolicy cp)
{
    connectStandardPorts(controller_name,robot_name,cp)
    print.ln("Connecting all ports from "+controller_name+" to robot "+robot_name);
    connectPortsFromList(controller_name,robot_name,lwr_ports_names,cp);
    return true
}

global bool connectAllPorts(string controller_name,string robot_name, ConnPolicy cp)
{
    connectStandardPorts(controller_name,robot_name,cp)
    connectLWRPorts(controller_name,robot_name,cp)
    print.ln("\033[34;1m[Info] connectAllPorts is deprecated,\n please use connectStandardPorts() + connectLWRPorts() instead for standard + Kuka specific ports\033[0m");
    return true;
}

global bool loadStatePublisher(bool start_component)
{
    var string robot_name = getRobotName()
    var string comp_name = robot_name+"_state_pub"
    #var string state_pub_path = ros.find("rtt_state_publisher")+"/scripts/loader.ops"
    #print.ln("Loading state publisher at "+state_pub_path)
    #runScript(state_pub_path)
    import("rtt_state_publisher")
    import("rtt_sensor_msgs")

    loadComponent(comp_name,"RTTStatePublisher")

    setActivity(comp_name,0.01,LowestPriority,ORO_SCHED_OTHER)
    #setActivity(comp_name,0,LowestPriority,ORO_SCHED_OTHER)
    #loadService(comp_name,"sim_clock_activity")
    #ros.clock.useROSClockTopic()
    #ros.clock.enableSimClock()
    if(!configureComponent(comp_name)) then
        return false

    print.ln("\033[34;1m[Info] Loading state publisher for "+robot_name+"\033[0m\n")

    connectPeers(comp_name,robot_name)
    connect(comp_name+".JointPosition",robot_name+".JointPosition",ConnPolicy())
    connect(comp_name+".JointVelocity",robot_name+".JointVelocity",ConnPolicy())
    connect(comp_name+".JointTorque",robot_name+".JointTorque",ConnPolicy())

    stream(comp_name+".JointStates",ros.comm.topic("joint_states"))

    if(start_component) then
        startComponent(comp_name)
    return true
}

global bool loadConman()
{
    print.ln("\033[34;1m[Info] Loading ConMan \033[0m\n")
    ros.import("conman")
    ros.import("conman_ros")
    loadComponent("scheme","conman::Scheme")
    setActivity("scheme",0.001,10,ORO_SCHED_RT)
    scripting.eval("scheme.loadService(\"conman_ros\")")
    scripting.eval("scheme.addGroup(\"robots\")")
    scripting.eval("scheme.addGroup(\"state_estimation\")")
    scripting.eval("scheme.addGroup(\"controllers\")")

    return true
}

global bool addControllerToConman(string component_name)
{
    stopComponent(component_name);
    connectPeers("scheme",component_name);
    scripting.eval("scheme.addToGroup(\""+component_name+"\",\"controllers\")");
    return scripting.eval("scheme.latchConnections(\"robots\",\"controllers\",true)");
}

global bool loadFBSched()
{
    import("fbsched");
    var bool res = loadComponent("fbs","FBSched");
    setActivity("fbs",0.001,10,ORO_SCHED_RT);
    return res;
}
global bool addControllerToFBSched(string component_name)
{
    stopComponent(component_name);
    scripting.eval(component_name+".setPeriod(0)");
    startComponent(component_name);
    connectPeers("fbs",component_name);
    setMasterSlaveActivity("fbs",component_name)
    return true;
}

global void generateGraph()
{
    import("rtt_dot_service")
    loadService("Deployer","dot")
    print.ln("You can now run \n\n\t xdot ~/.ros/orograph.dot")
}


global bool loadJointTrajectoryGeneratorKDL(bool start_component)
{
  var string robot_name = getRobotName()
  var string comp_name = robot_name + "_traj_kdl"

  print.ln("\033[34;1m[Info] Loading Trajectory generator KDL for "+robot_name+"\033[0m\n")

  import("rtt_ros")
  ros.import("rtt_joint_traj_generator_kdl")
  loadComponent(comp_name,"JointTrajGeneratorKDL")
  setActivity(comp_name,0.001,10,ORO_SCHED_RT);

  connect(comp_name+".joint_position_in",robot_name+".JointPosition",ConnPolicy())
  connect(comp_name+".joint_velocity_in",robot_name+".JointVelocity",ConnPolicy())
  connect(comp_name+".joint_position_out",robot_name+".JointPositionCommand",ConnPolicy())

  configureComponent(comp_name)

  if(start_component) then
      startComponent(comp_name)
  return true;
}

global bool loadROSControl(bool start_component)
{
    var string robot_name = getRobotName()
    var string comp_name = robot_name + "_ros_control"

    print.ln("\033[34;1m[Info] Loading ROS Control for "+robot_name+"\033[0m\n")

    import("rtt_ros")
    import("rtt_control_msgs")
    import("rtt_controller_manager_msgs")

    ros.import("rtt_ros_control_embedded")

    # Load the RttRosControl component
    loadComponent(comp_name,"RttRosControl")

    ## Give it a periodic activity
    setActivity(comp_name,0.001,LowestPriority,ORO_SCHED_RT)


    ## Preload controllers
    scripting.eval(comp_name+".preloadController(\"joint_trajectory_controller\")")
    scripting.eval(comp_name+".preloadController(\"joint_state_controller\")")

    ## Configure the RttRosControl component
    configureComponent(comp_name)

    connect(comp_name+".JointPosition",robot_name+".JointPosition",ConnPolicy())
    connect(comp_name+".JointVelocity",robot_name+".JointVelocity",ConnPolicy())
    connect(comp_name+".JointTorque",robot_name+".JointTorque",ConnPolicy())
    connect(comp_name+".JointPositionCommand",robot_name+".JointPositionCommand",ConnPolicy())
    connect(comp_name+".JointTorqueCommand",robot_name+".JointTorqueCommand",ConnPolicy())

    ## Start it
    if(start_component) then
        startComponent(comp_name)
    return true;
}

global bool loadAtiFTSensor(bool start_component)
{
    ros.import("rtt_ati_sensor")

    loadComponent("ft_sensor","rtt_ati::FTSensor")

    setActivity("ft_sensor",0.001,10,ORO_SCHED_RT)
    # uncomment for event based update with netft box set at component periodicity
    #ft_sensor.read_mode = 2
    #ft_sensor.sample_count = 0

    configureComponent("ft_sensor")
    if(start_component) then
        startComponent("ft_sensor")
    return true
}

global string loadRobot(string robot_name,bool is_sim,bool start_component)
{
    #importRequiredPackages()
    #var bool is_sim = isSim();
    #var string robot_name = getRobotName()

    if(is_sim) then
    {
        import("rtt_lwr_sim")
        loadComponent(robot_name,"lwr::LWRSim")
        connectPeers("gazebo",robot_name)
        scripting.eval(robot_name+".synchronize_with_commands = false")
        scripting.eval(robot_name+".getModel(\"gazebo\",\""+robot_name+"\",30.0)")
        configureComponent(robot_name)

        print.ln("\033[34;1m[Info]["+robot_name+"] RUNNING ON SIMULATION \033[0m\n")
    }
    else
    {

        var string robot_hw_script_path = ros.find("lwr_fri")+"/lwr_fri_loader.ops"

        print.ln("Loading robot config from : "+robot_hw_script_path)

        runScript(robot_hw_script_path)

        print.ln("\033[34;1m[Info]["+robot_name+"] RUNNING ON HARDWARE \033[0m\n")
    }

    if(start_component) then
        startComponent(robot_name)

    loadKRLTool(start_component)

    if(is_sim) then
        setJointTorqueControlMode();
    return robot_name;
}
